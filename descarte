
const Transaction = {
  all: [{
    id: 1,
    description: 'Luz',
    amount: -30000,
    date: '23/01/2021'
  },
  {
    id: 2,
    description: 'Internet',
    amount: -20000,
    date: '23/01/2021'
  },
  {
    id: 3,
    description: 'Agua',
    amount: -50000,
    date: '23/01/2021'
  },
  {
    id: 4,
    description: 'Website',
    amount: 150000,
    date: '23/01/2021'

}],

  add(transaction) {
    Transaction.all.push(transaction)

    App.reload()
  },

  remove(index) {
    Transaction.all.splice(index, 1)

    App.reload()
  },

  incomes() {
    let income = 0
    //pegar todas as transações
    //para cada transação
    Transaction.all.forEach(transaction => {
      // se ela for maior que zero
      if (transaction.amount > 0) {
        // somar a uma variavel e retornar a variavel
        income += transaction.amount
      }
    })

    return income

  },
  expenses() {
    let expense = 0
    //pegar todas as transações
    //para cada transação
    Transaction.all.forEach(transaction => {
      // se ela for menor que zero
      if (transaction.amount < 0) {
        // somar a uma variavel e retornar a variavel
        expense += transaction.amount
      }
    })

    return expense

  },

  total() {
    return Transaction.incomes() + Transaction.expenses()
  }

}

const DOM = {
  transactionsContainer: document.querySelector('#data-table tbody'),

  addTransaction(transaction, index) {
    // console.log(transaction)
    const tr = document.createElement('tr')
    tr.innerHTML = DOM.innerHTMLTransaction(transaction)

    // console.log(tr.innerHTML)

    DOM.transactionsContainer.appendChild(tr)
  },
  innerHTMLTransaction(transaction) {
    const CSSclass = transaction.amount > 0 ? "income" : "expense"

    const amount = Utils.formatCurrency(transaction.amount)

    const html = `

    <td class="description">${transaction.description}</td>
    <td class="${CSSclass}">${amount}</td>
    <td class="date">${transaction.date}</td>
    <td><img src="./assets/minus.svg" alt="Remover transação"></td>
    `
    return html
  },

  clearTransactions() {
    DOM.transactionsContainer.innerHTML = ""
  },

  updateBalance() {
    document
      .getElementById('incomeDisplay')
      .innerHTML = Utils.formatCurrency(Transaction.incomes())
    document
      .getElementById('expenseDisplay')
      .innerHTML = Utils.formatCurrency(Transaction.expenses())
    document
      .getElementById('totalDisplay')
      .innerHTML = Utils.formatCurrency(Transaction.total())
  }
}

const Utils = {

  formarAmout(value) {
    value = Number(value.replace(/\,\./g, "")) * 100
    return value
  },

  formatDate(date) {
    const splitedDate = date.split("-")
    return `${splitedDate[2]}/${splitedDate[1]}/${splitedDate[0]}`
    console.log
  },




  formatCurrency(value) {
    const signal = Number(value) < 0 ? "-" : ""

    value = String(value).replace(/\D/g, "")

    value = Number(value) / 100

    value = value.toLocaleString("pt-BR", {
      style: "currency",
      currency: "BRL"
    })

    // console.log(signal + value)
    return signal + value
  }
}

const Form = {
  description: document.querySelector('input#description'),
  amount: document.querySelector('input#amount'),
  date: document.querySelector('input#date'),

  getValues() {
    return {
      description: Form.description.value,
      amount: Form.amount.value,
      date: Form.date.value,
    }
  },

  validateFields() {
    const { description, amount, date } = Form.getValues()

    if(description.trim() === "" ||
      amount.trim() === "" ||
      date.trim() === "") {
      throw new Error("Please fill in all the fields!")
    }
    // console.log(Form.getValues())
  },

  // formatValues() {
  //   let { description, amount, date } = Form.getValues()

  //   amount = Utils.formarAmout(amount)

  //   date = Utils.formtDate(date)

  //   return {
  //     description,
  //     amount,
  //     date,
  //   }

  // },

  // saveTransaction(transaction) {
  //   Transaction.add(transaction)
  // },

  // clearFields() {
  //   Form.description.value = ""
  //   Form.amount.value = ""
  //   Form.date.value = ""
  // },

  submit(event) {
    event.preventDefault()

    try {
        //verificar se todas as informações foram preenchidas
        Form.validateFields()
        //Formatar os dados
        // const transaction = Form.formatValues()
        //salvar
        // Form.saveTransaction(transaction)
        // Transaction.add(transaction)
  
        //apagar dados do formulario
        // Form.clearFields()
        //modal feche
        // Modal.close()
        //atualizar aplicação
        // app.reload()
    } catch (error) {
      alert(error.message)
    }

    console.log(event)

  }
}

const App = {
  init() {
    Transaction.all.forEach(transaction => {
      DOM.addTransaction(transaction)
    })

    DOM.updateBalance()


  },
  reload() {
    DOM.clearTransactions()
    App.init()
  },
}

App.init()

// Transaction.add({
//   // id:39,
//   description:'',
//   amount: 200,
//   date: '23/01/2021'

// })

// DOM.addTransaction(transactions[0])
// transactions.forEach(function(transaction) {
//   DOM.addTransaction(transaction)
// })

// DOM.updateBalance()
